/**
Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || k == 0)
            return head;
        
        int len = 1;
        ListNode p = head;
        while (p.next != null) {//这个地方不用 p!= null，是为了得到尾节点
            len++;
            p = p.next;
        }
        p.next = head;//形成环
        
        k = len - k % len;
        
        ListNode newHead = null;
        for (int i = 1; i <= k; i++) {
            head = head.next;
            p = p.next;//从原本的尾结点移动k次后，刚好到达新的头结点的前一个结点
        }
        
        newHead = head;
        p.next = null;
        
        return newHead;
    }
}
